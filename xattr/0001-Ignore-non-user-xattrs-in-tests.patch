From bc889657d136489898fd2002c7eff887f5ea636d Mon Sep 17 00:00:00 2001
From: Steven Allen <steven@stebalien.com>
Date: Sun, 26 Feb 2017 16:01:34 -0800
Subject: [PATCH 1/2] Ignore non-user xattrs in tests.

This should fix tests on systems with, e.g., selinux.

Fixes #9
---
 tests/main.rs | 36 +++++++++++++++++++++++++++++-------
 1 file changed, 29 insertions(+), 7 deletions(-)

diff --git a/tests/main.rs b/tests/main.rs
index eb8baba3..f1dd7069 100644
--- a/tests/main.rs
+++ b/tests/main.rs
@@ -10,40 +10,61 @@ use tempfile::{tempfile_in, NamedTempFile};
 #[test]
 #[cfg(any(target_os = "linux", target_os = "freebsd"))]
 fn test_fd() {
+    use std::os::unix::ffi::OsStrExt;
     // Only works on "real" filesystems.
     let tmp = tempfile_in("/var/tmp").unwrap();
     assert!(tmp.get_xattr("user.test").is_err());
-    assert_eq!(tmp.list_xattr().unwrap().next(), None);
+    assert_eq!(tmp.list_xattr()
+               .unwrap()
+               .filter(|x| x.as_bytes().starts_with(b"user."))
+               .count(), 0);
 
     tmp.set_xattr("user.test", b"my test").unwrap();
     assert_eq!(tmp.get_xattr("user.test").unwrap(), b"my test");
-    assert_eq!(&tmp.list_xattr().unwrap().next().unwrap(), "user.test");
+    assert_eq!(tmp.list_xattr()
+               .unwrap()
+               .filter(|x| x.as_bytes().starts_with(b"user."))
+               .collect::<Vec<_>>(), vec![OsStr::new("user.test")]);
 
     tmp.remove_xattr("user.test").unwrap();
     assert!(tmp.get_xattr("user.test").is_err());
-    assert_eq!(tmp.list_xattr().unwrap().next(), None);
+    assert_eq!(tmp.list_xattr()
+               .unwrap()
+               .filter(|x| x.as_bytes().starts_with(b"user."))
+               .count(), 0);
 }
 
 #[test]
 #[cfg(any(target_os = "linux", target_os = "freebsd"))]
 fn test_path() {
+    use std::os::unix::ffi::OsStrExt;
     // Only works on "real" filesystems.
     let tmp = NamedTempFile::new_in("/var/tmp").unwrap();
     assert!(xattr::get(tmp.path(), "user.test").is_err());
-    assert_eq!(xattr::list(tmp.path(), ).unwrap().next(), None);
+    assert_eq!(xattr::list(tmp.path())
+               .unwrap()
+               .map(|x| x.as_bytes().starts_with(b"user."))
+               .count(), 0);
 
     xattr::set(tmp.path(), "user.test", b"my test").unwrap();
     assert_eq!(xattr::get(tmp.path(), "user.test").unwrap(), b"my test");
-    assert_eq!(&xattr::list(tmp.path(), ).unwrap().next().unwrap(), "user.test");
+    assert_eq!(xattr::list(tmp.path())
+               .unwrap()
+               .filter(|x| x.as_bytes().starts_with(b"user."))
+               .collect::<Vec<_>>(), vec![OsStr::new("user.test")]);
 
     xattr::remove(tmp.path(), "user.test").unwrap();
     assert!(xattr::get(tmp.path(), "user.test").is_err());
-    assert_eq!(xattr::list(tmp.path(), ).unwrap().next(), None);
+    assert_eq!(xattr::list(tmp.path())
+               .unwrap()
+               .filter(|x| x.as_bytes().starts_with(b"user."))
+               .count(), 0);
 }
 
 #[test]
 #[cfg(any(target_os = "linux", target_os = "freebsd"))]
 fn test_multi() {
+    use std::os::unix::ffi::OsStrExt;
     // Only works on "real" filesystems.
     let tmp = tempfile_in("/var/tmp").unwrap();
     let mut items: BTreeSet<_> = [
@@ -55,7 +76,8 @@ fn test_multi() {
     for it in &items {
         tmp.set_xattr(it, b"value").unwrap();
     }
-    for it in tmp.list_xattr().unwrap() {
+    for it in tmp.list_xattr().unwrap()
+        .filter(|x| x.as_bytes().starts_with(&*b"user.")) {
         assert!(items.remove(&*it));
     }
     assert!(items.is_empty());
-- 
2.11.1

